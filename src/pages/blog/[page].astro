---
import Layout from '@site/layouts/Layout.astro';
import Header from '@site/components/Header.astro';
import PostListing from '@site/components/blog/PostListing.astro';

import { getPosts } from '@site/lib/blog/data';
import { getNavigationUrls } from '@site/lib/blog/utils';

export async function getStaticPaths() {
  const pages = [];
  let cursor = null;
  let pageNumber = 1;
  let hasMorePages = true;
  
  // Skip page 1 as it's handled by index.astro
  // Get first page to get to the second page
  const firstPageData = await getPosts(null);
  cursor = firstPageData.publication.posts.pageInfo.endCursor;
  pageNumber = 2;  // Start with page 2
  hasMorePages = firstPageData.publication.posts.pageInfo.hasNextPage;
  
  // Fetch pages one by one using cursors
  while (hasMorePages && pageNumber <= 15) { // Limit to 15 pages for safety
    console.log(`ðŸ”Ž Fetching page ${pageNumber} with cursor: ${cursor}`);
    
    // Get current page of posts with cursor
    const data = await getPosts(cursor);
    const pageInfo = data.publication.posts.pageInfo;
    const posts = data.publication.posts.edges;
    
    // Store this page's data and metadata
    pages.push({
      params: { page: pageNumber.toString() },
      props: { 
        posts,
        pageInfo,
        currentPage: pageNumber,
        prevCursor: pageNumber > 1 ? cursor : null,
        nextCursor: pageInfo.hasNextPage ? pageInfo.endCursor : null,
        totalPages: pageNumber
      }
    });
    
    // Update for next iteration
    if (pageInfo.hasNextPage) {
      cursor = pageInfo.endCursor;
      pageNumber++;
    } else {
      hasMorePages = false;
    }
  }
  
  // Update totalPages for all pages
  const totalPages = pages.length + 1;  // +1 because we skipped page 1
  pages.forEach(page => {
    page.props.totalPages = totalPages;
  });
  
  console.log(`Generated ${pages.length} pages using cursor-based pagination`);
  return pages;
}

// Get the props that were passed from getStaticPaths
const { posts, pageInfo, currentPage, totalPages } = Astro.props;

// Generate URL paths for navigation
const { prevPageUrl, nextPageUrl } = getNavigationUrls(currentPage, pageInfo.hasNextPage);
---

<Layout title={`page ${currentPage} | blog`}>
    <Header immersive />
    <section class="blog-hero z-0">
      <div class="flex flex-row py-8 px-8 lg:px-16 xl:px-32 w-full items-center">
          <div class="flex flex-row gap-3 pt-4 items-center select-none">
              <h1 class="blog-hero-title-alt text-[2.5rem] font-bold pb-1 font-header">page</h1>
              <h1 class="blog-hero-title-alt text-[1.9rem] font-bold font-header">{currentPage}</h1>
          </div>
      </div>
    </section>
    <section class="flex flex-col gap-8 py-8 px-8 lg:px-16 xl:px-32 w-full mt-[5rem] z-1 relative">
        <PostListing 
            posts={posts}
            currentPage={currentPage}
            totalPages={totalPages}
            prevPageUrl={prevPageUrl}
            nextPageUrl={nextPageUrl}
        />
    </section>
</Layout>
